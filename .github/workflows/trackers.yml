name: Update Tracker List

on:
  schedule:
    # Runs daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  contents: write

jobs:
  generate-tracker-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install tldextract

      - name: Download tracker list
        run: |
          curl -o trackers.txt https://raw.githubusercontent.com/adysec/tracker/refs/heads/main/trackers_all.txt

      - name: Process and generate YAML
        id: generate_yaml
        run: |
          python -c '
          import urllib.parse
          import tldextract
          import ipaddress
          import os

          input_file = "trackers.txt"
          domain_output_file = "trackers_domain.yaml"
          ip_output_file = "trackers_ip.yaml"

          domains = set()
          ips = set()
          input_url = "https://raw.githubusercontent.com/adysec/tracker/refs/heads/main/trackers_all.txt"

          with open(input_file, "r") as f:
              for line in f:
                  line = line.strip()
                  if not line:
                      continue

                  try:
                      parsed_url = urllib.parse.urlparse(line)
                      hostname = parsed_url.hostname

                      if not hostname:
                          continue

                      # Check if valid IP (handles both IPv4 and IPv6)
                      try:
                          ipaddress.ip_address(hostname.strip("[]"))
                          ips.add(hostname.strip("[]"))
                          continue
                      except ValueError:
                          pass

                      # Handle domains with subdomains
                      ext = tldextract.extract(hostname)
                      if ext.domain and ext.suffix:
                          domains.add(f"{ext.domain}.{ext.suffix}")

                  except Exception:
                      pass

          # Generate domain YAML
          domain_content = f"""# NAME: Tracker Domain List\n# SOURCE: {input_url}\npayload:\n"""
          for domain in sorted(domains):
              domain_content += f"  - DOMAIN-SUFFIX,{domain}\n"

          # Generate IP YAML
          ip_content = f"""# NAME: Tracker IP List\n# SOURCE: {input_url}\npayload:\n"""
          for ip in sorted(ips):
              # Check IP type to determine CIDR suffix
              if ":" in ip:  # IPv6
                  ip_content += f"  - \"{ip}/128\"\n"
              else:  # IPv4
                  ip_content += f"  - \"{ip}/32\"\n"

          # Initialize changed flag
          changed = False
          github_output_path = os.environ.get("GITHUB_OUTPUT")

          # Process domain file
          if os.path.exists(domain_output_file):
              with open(domain_output_file, "r") as f:
                  existing = f.read()
              if existing != domain_content:
                  changed = True
                  with open(domain_output_file, "w") as f:
                      f.write(domain_content)
          else:
              changed = True
              with open(domain_output_file, "w") as f:
                  f.write(domain_content)

          # Process IP file
          if os.path.exists(ip_output_file):
              with open(ip_output_file, "r") as f:
                  existing = f.read()
              if existing != ip_content:
                  changed = True
                  with open(ip_output_file, "w") as f:
                      f.write(ip_content)
          else:
              changed = True
              with open(ip_output_file, "w") as f:
                  f.write(ip_content)

          # Set output parameter
          if changed:
              print("Tracker lists updated.")
              if github_output_path:
                  with open(github_output_path, "a") as fo:
                      fo.write("updated=true\n")
          else:
              print("Tracker lists are already up-to-date.")
              if github_output_path:
                  with open(github_output_path, "a") as fo:
                      fo.write("updated=false\n")
          '
        shell: bash

      - name: Configure Git
        if: steps.generate_yaml.outputs.updated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        if: steps.generate_yaml.outputs.updated == 'true'
        run: |
          git add trackers_domain.yaml trackers_ip.yaml
          git commit -m "Update tracker lists"
          git push
